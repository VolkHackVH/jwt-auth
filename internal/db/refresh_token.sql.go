// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refresh_tokens (user_id, token_hash, user_agent, ip_address)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, user_agent
`

type CreateTokenParams struct {
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	TokenHash string      `db:"token_hash" json:"token_hash"`
	UserAgent string      `db:"user_agent" json:"user_agent"`
	IpAddress string      `db:"ip_address" json:"ip_address"`
}

type CreateTokenRow struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	UserAgent string      `db:"user_agent" json:"user_agent"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (CreateTokenRow, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.UserID,
		arg.TokenHash,
		arg.UserAgent,
		arg.IpAddress,
	)
	var i CreateTokenRow
	err := row.Scan(&i.ID, &i.UserID, &i.UserAgent)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM refresh_tokens
WHERE user_id = $1 AND user_agent = $2
`

type DeleteTokenParams struct {
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	UserAgent string      `db:"user_agent" json:"user_agent"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.Exec(ctx, deleteToken, arg.UserID, arg.UserAgent)
	return err
}

const findRefreshToken = `-- name: FindRefreshToken :one
SELECT id, user_id, token_hash, user_agent, ip_address, created_at
FROM refresh_tokens
WHERE user_id = $1 AND user_agent = $2
`

type FindRefreshTokenParams struct {
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	UserAgent string      `db:"user_agent" json:"user_agent"`
}

func (q *Queries) FindRefreshToken(ctx context.Context, arg FindRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshToken, arg.UserID, arg.UserAgent)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const findRefreshTokenByUser = `-- name: FindRefreshTokenByUser :one
SELECT id, user_id, token_hash, user_agent, ip_address, created_at
FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) FindRefreshTokenByUser(ctx context.Context, userID pgtype.UUID) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshTokenByUser, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE refresh_tokens
SET token_hash = $2
WHERE id = $1
RETURNING id, user_id, user_agent
`

type UpdateTokenParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	TokenHash string      `db:"token_hash" json:"token_hash"`
}

type UpdateTokenRow struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	UserAgent string      `db:"user_agent" json:"user_agent"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (UpdateTokenRow, error) {
	row := q.db.QueryRow(ctx, updateToken, arg.ID, arg.TokenHash)
	var i UpdateTokenRow
	err := row.Scan(&i.ID, &i.UserID, &i.UserAgent)
	return i, err
}
